@@ .. @@
 import TimerOverview from './TimerOverview'
 import CreateTimerModal from './CreateTimerModal'
 import SettingsModal from './SettingsModal'
 import EventRunningInterfaceModal from './EventRunningInterfaceModal'
+import ReportsPage from './ReportsPage'
 import SubscriptionModal from './SubscriptionModal'
 import SuccessPage from './SuccessPage'
 import { supabase } from '../lib/supabase'
@@ .. @@
         {/* Reports View */}
         {currentView === 'reports' && (
-          <div className="min-h-screen w-full bg-gray-900 p-6">
-            <div className="max-w-4xl mx-auto">
-              <div className="mb-8">
-                <h1 className="text-3xl font-bold text-white mb-4">Reports & Analytics</h1>
-                <p className="text-gray-400">View timer activity logs and performance metrics.</p>
-              </div>
-
-              {/* Date Range Filter */}
-              <div className="bg-gray-800 rounded-xl p-6 mb-6 border border-gray-700">
-                <h3 className="text-lg font-semibold text-white mb-4">Filter by Date Range</h3>
-                <div className="flex flex-col sm:flex-row gap-4">
-                  <div>
-                    <label className="block text-sm font-medium text-gray-300 mb-2">Start Date</label>
-                    <input
-                      type="date"
-                      value={reportStartDate}
-                      onChange={(e) => setReportStartDate(e.target.value)}
-                      className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
-                    />
-                  </div>
-                  <div>
-                    <label className="block text-sm font-medium text-gray-300 mb-2">End Date</label>
-                    <input
-                      type="date"
-                      value={reportEndDate}
-                      onChange={(e) => setReportEndDate(e.target.value)}
-                      className="bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
-                    />
-                  </div>
-                </div>
-              </div>
-
-              {/* Summary Statistics */}
-              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
-                <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
-                  <h4 className="text-gray-300 text-sm font-medium mb-1">Total Timers</h4>
-                  <p className="text-2xl font-bold text-blue-400">{filteredLogs.filter(log => log.action === 'created').length}</p>
-                </div>
-                <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
-                  <h4 className="text-gray-300 text-sm font-medium mb-1">Total Actions</h4>
-                  <p className="text-2xl font-bold text-purple-400">{filteredLogs.length}</p>
-                </div>
-                <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
-                  <h4 className="text-gray-300 text-sm font-medium mb-1">Active Sessions</h4>
-                  <p className="text-2xl font-bold text-green-400">{Object.keys(timerSessions).length}</p>
-                </div>
-                <div className="bg-gray-800 rounded-lg p-4 border border-gray-700">
-                  <h4 className="text-gray-300 text-sm font-medium mb-1">Presenters</h4>
-                  <p className="text-2xl font-bold text-yellow-400">
-                    {new Set(timers.map(timer => timer.presenter_name)).size}
-                  </p>
-                </div>
-              </div>
-
-              {/* Activity Log */}
-              <div className="bg-gray-800 rounded-xl p-6 border border-gray-700">
-                <div className="flex justify-between items-center mb-4">
-                  <h3 className="text-lg font-semibold text-white">Activity Log</h3>
-                  <button
-                    onClick={exportToCSV}
-                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors flex items-center gap-2"
-                  >
-                    <Download className="w-4 h-4" />
-                    Export CSV
-                  </button>
-                </div>
-                
-                {filteredLogs.length === 0 ? (
-                  <div className="text-center py-8">
-                    <FileText className="w-12 h-12 text-gray-600 mx-auto mb-3" />
-                    <p className="text-gray-400">No activity logs found for the selected date range.</p>
-                  </div>
-                ) : (
-                  <div className="overflow-x-auto">
-                    <table className="w-full text-sm">
-                      <thead>
-                        <tr className="border-b border-gray-700">
-                          <th className="text-left py-3 px-4 text-gray-300 font-medium">Time</th>
-                          <th className="text-left py-3 px-4 text-gray-300 font-medium">Timer</th>
-                          <th className="text-left py-3 px-4 text-gray-300 font-medium">Presenter</th>
-                          <th className="text-left py-3 px-4 text-gray-300 font-medium">Action</th>
-                          <th className="text-left py-3 px-4 text-gray-300 font-medium">Details</th>
-                        </tr>
-                      </thead>
-                      <tbody className="bg-gray-800">
-                        {filteredLogs.map((log) => {
-                          const timer = timers.find(t => t.id === log.timer_id)
-                          return (
-                            <tr key={log.id} className="border-b border-gray-700 hover:bg-gray-700">
-                              <td className="py-3 px-4 text-gray-300">
-                                {new Date(log.created_at).toLocaleString()}
-                              </td>
-                              <td className="py-3 px-4 text-white font-medium">
-                                {timer?.name || 'Unknown Timer'}
-                              </td>
-                              <td className="py-3 px-4 text-gray-300">
-                                {timer?.presenter_name || 'Unknown'}
-                              </td>
-                              <td className="py-3 px-4">
-                                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
-                                  log.action === 'started' ? 'bg-green-900 text-green-300' :
-                                  log.action === 'paused' ? 'bg-yellow-900 text-yellow-300' :
-                                  log.action === 'stopped' ? 'bg-red-900 text-red-300' :
-                                  log.action === 'reset' ? 'bg-blue-900 text-blue-300' :
-                                  log.action === 'finished_early' ? 'bg-purple-900 text-purple-300' :
-                                  log.action === 'expired' ? 'bg-orange-900 text-orange-300' :
-                                  'bg-gray-700 text-gray-300'
-                                }`}>
-                                  {log.action === 'finished_early' ? '✅ Finished Early' :
-                                   log.action === 'expired' ? '⚠️ Expired' :
-                                   log.action.charAt(0).toUpperCase() + log.action.slice(1)}
-                                </span>
-                              </td>
-                              <td className="py-3 px-4 text-gray-400">
-                                {log.notes || 
-                                 (log.time_value ? `${Math.floor(log.time_value / 60)}:${(log.time_value % 60).toString().padStart(2, '0')}` : '-')}
-                              </td>
-                            </tr>
-                          )
-                        })}
-                      </tbody>
-                    </table>
-                  </div>
-                )}
-              </div>
-            </div>
-          </div>
+          <ReportsPage session={session} />
         )}