(()=>{
const $=s=>document.querySelector(s), $$=s=>document.querySelectorAll(s);
const pad=n=>String(n).padStart(2,‘0’);
const LS={
theme:‘synccue.theme’,
mH:‘synccue.main.hours’,
mHs:‘synccue.main.hundredths’,
mC:‘synccue.main.color’,
pH:‘synccue.pomo.hours’,
pHs:‘synccue.pomo.hundredths’,
pC:‘synccue.pomo.color’,
sH:‘synccue.sw.hours’,
sHs:‘synccue.sw.hundredths’,
sC:‘synccue.sw.color’,
proTimers:‘synccue.pro.timers’,
proMessages:‘synccue.pro.messages’
};

// Supabase Configuration - Add your credentials here
const SUPABASE_URL = ‘’; // Your Supabase URL
const SUPABASE_ANON_KEY = ‘’; // Your Supabase anon key

const screens=[‘mainTimer’,‘pomodoro’,‘stopwatch’,‘proTimer’];
let si=0;

function show(i){
si=(i+screens.length)%screens.length;
screens.forEach((id,idx)=>{
const el = $(’#’+id);
if(el) el.classList.toggle(‘active’, idx===si);
});
syncTabs();

if(screens[si] === ‘proTimer’) {
initProTimer();
}
}

function syncTabs(){
$$(’.tab’).forEach(b=>{
const a=b.dataset.tab===screens[si];
b.classList.toggle(‘active’,a);
b.setAttribute(‘aria-selected’,a?‘true’:‘false’);
});
}

$$(’.tab’).forEach(btn=>btn.addEventListener(‘click’,()=>{
const id=btn.dataset.tab;
const idx=screens.indexOf(id);
if(idx>=0) show(idx);
}));

function applyTheme(v){
document.body.classList.toggle(‘dark’, v===‘dark’);
localStorage.setItem(LS.theme,v);
const toggle = $(’#themeToggle’);
if(toggle) toggle.textContent = v===‘dark’ ? ‘☀️’ : ‘🌙’;
}

const themeToggle = $(’#themeToggle’);
if(themeToggle) {
themeToggle.addEventListener(‘click’, ()=>
applyTheme(document.body.classList.contains(‘dark’)?‘light’:‘dark’)
);
}

applyTheme(localStorage.getItem(LS.theme)||‘dark’);
syncTabs();

function exportListToCSV(el, filename, header=‘timestamp,event’){
if(!el) return;
const rows=[header];
el.querySelectorAll(‘li’).forEach(li=>{
const t=li.textContent.split(’ — ‘);
if(t.length>=2) rows.push(`"${t[0].replace(/"/g,'""')}","${t.slice(1).join(' — ').replace(/"/g,'""')}"`);
else rows.push(`,"${li.textContent.replace(/"/g,'""')}"`);
});
const blob=new Blob([rows.join(’\n’)],{type:‘text/csv;charset=utf-8;’});
const a=document.createElement(‘a’);
a.href=URL.createObjectURL(blob);
a.download=filename;
a.click();
setTimeout(()=>URL.revokeObjectURL(a.href),500);
}

function fmtTime(ms, showH, showHund){
const hundredths = Math.floor((ms%1000)/10);
let totalSec = Math.floor(ms/1000);
const s = totalSec % 60;
totalSec = Math.floor(totalSec/60);
const m = totalSec % 60;
const h = Math.floor(totalSec/60);
const base = (showH || h>0) ? `${pad(h)}:${pad(m)}:${pad(s)}` : `${pad(m)}:${pad(s)}`;
return showHund ? `${base}.${pad(hundredths)}` : base;
}

/* ––––– Fullscreen overlay ––––– */
const fs=$(’#fs’), fsDigits=$(’#fsDigits’), fsBar=$(’#fsBar’), fsElapsed=$(’#fsElapsed’), fsBarWrap=$(’#fsBarWrap’), fsStatus=$(’#fsStatus’);
let fsMode=null;

function setFsFont(text){
if(!fsDigits) return;
const len=text.length;
let size=‘20vw’;
if(len>=12) size=‘12vw’;
else if(len>=10) size=‘15vw’;
else if(len>=9) size=‘18vw’;
fsDigits.style.fontSize=size;
}

function openFS(mode, text, ratio, paused, color, showBar){
if(!fs || !fsDigits) return;
fsMode=mode;
fsDigits.textContent=text;
fsDigits.style.color=color||’’;
setFsFont(text);
if(fsBarWrap) fsBarWrap.style.display=showBar?‘block’:‘none’;
const r=Math.max(0,Math.min(1,ratio||0));
if(fsBar) fsBar.style.transform=`scaleX(${r})`;
if(fsElapsed) fsElapsed.style.width=`${(1-r)*100}%`;
if(fsStatus) fsStatus.style.display = paused?‘block’:‘none’;
fs.classList.remove(‘hidden’);
}

function closeFS(){
fsMode=null;
if(fs) fs.classList.add(‘hidden’);
}

const fsExit = $(’#fsExit’);
if(fsExit) fsExit.addEventListener(‘click’, closeFS);

window.addEventListener(‘resize’,()=>{
if(!fsMode || !fsDigits) return;
setFsFont(fsDigits.textContent);
});

/* ––––– Main Timer ––––– */
let mainDur=300000, mainRemain=300000, mainRunning=false, mainTick=null, mainStep=1000;
const mainDigits=$(’#mainTime’), mainBar=$(’#mainBar’), mainElapsed=$(’#mainElapsed’), mainLog=$(’#mainLog’);
const optHours=$(’#optHours’), optHund=$(’#optHundredths’), digitColor=$(’#digitColor’);
const mtModal=$(’#mtSettings’);

const mainSettings = $(’#mainSettings’);
if(mainSettings) mainSettings.addEventListener(‘click’, ()=>mtModal?.classList.remove(‘hidden’));
const mtClose = $(’#mtClose’);
if(mtClose) mtClose.addEventListener(‘click’, ()=>mtModal?.classList.add(‘hidden’));
const mtCancel = $(’#mtCancel’);
if(mtCancel) mtCancel.addEventListener(‘click’, ()=>mtModal?.classList.add(‘hidden’));
const mainToggleLog = $(’#mainToggleLog’);
if(mainToggleLog) mainToggleLog.addEventListener(‘click’, ()=>$(’#mainLogCard’)?.classList.toggle(‘hidden’));

if(optHours) optHours.checked=(localStorage.getItem(LS.mH)||‘false’)===‘true’;
if(optHund) optHund.checked =(localStorage.getItem(LS.mHs)||‘false’)===‘true’;
if(digitColor) {
digitColor.value = localStorage.getItem(LS.mC) || ‘#e53935’;
if(mainDigits) mainDigits.style.color = digitColor.value;
}

if(optHours) optHours.onchange=()=>{ localStorage.setItem(LS.mH,optHours.checked?‘true’:‘false’); drawMain(); };
if(optHund) optHund.onchange =()=>{ localStorage.setItem(LS.mHs,optHund.checked?‘true’:‘false’); setMainCadence(); drawMain(); };
if(digitColor) digitColor.oninput=e=>{ localStorage.setItem(LS.mC,e.target.value); if(mainDigits) mainDigits.style.color=e.target.value; if(fsMode===‘main’ && fsDigits) fsDigits.style.color=e.target.value; };

const mainInput=$(’#mainInput’);

function fmtMain(){ return fmtTime(mainRemain, optHours?.checked, optHund?.checked); }
function setMainCadence(){ const step=optHund?.checked?10:1000; if(step!==mainStep){ mainStep=step; if(mainRunning){ clearInterval(mainTick); mainTick=setInterval(tickMain, mainStep); } } }
function drawMain(){
if(!mainDigits) return;
mainDigits.textContent=fmtMain();
const r=(mainDur?mainRemain/mainDur:0);
const rr=Math.max(0,Math.min(1,r));
if(mainBar) mainBar.style.transform=`scaleX(${rr})`;
if(mainElapsed) mainElapsed.style.width=`${(1-rr)*100}%`;
updateFS(‘main’, r, !mainRunning && mainRemain>0 && mainRemain<mainDur, mainDigits.textContent, digitColor?.value, true);
}
function tickMain(){ mainRemain=Math.max(0,mainRemain-mainStep); drawMain(); if(mainRemain<=0){ mainPause(); log(mainLog,‘Finished’); } }
function mainStart(){ if(mainRunning) return; if(mainRemain<=0){ if(mainDur<=0) return; mainRemain=mainDur; } setMainCadence(); mainRunning=true; mainTick=setInterval(tickMain, mainStep); log(mainLog,`Started (${fmtMain()})`); }
function mainPause(){ if(!mainRunning) return; mainRunning=false; clearInterval(mainTick); drawMain(); log(mainLog,`Paused at ${fmtMain()}`); }
function mainStop(){ mainRunning=false; clearInterval(mainTick); mainRemain=0; drawMain(); log(mainLog,‘Stopped’); }
function mainReset(){ mainRunning=false; clearInterval(mainTick); mainRemain=mainDur; drawMain(); log(mainLog,‘Reset’); }

function setMainFromInput(){
if(!mainInput) return;
const v=mainInput.value.trim();
const mm=/^(\d+):(\d{2})$/.exec(v);
if(!mm){ alert(‘Use mm:ss format’); return; }
const m=+mm[1], s=+mm[2];
mainDur=(m*60+s)*1000;
mainRemain=mainDur;
drawMain();
log(mainLog,`Set to ${fmtMain()}`);
}

function log(el,text){
if(!el) return;
const li=document.createElement(‘li’);
li.textContent=new Date().toLocaleTimeString()+’ — ’+text;
el.prepend(li);
}

// Main Timer Event Listeners
const mainStart_btn = $(’#mainStart’);
if(mainStart_btn) mainStart_btn.addEventListener(‘click’, mainStart);
const mainPause_btn = $(’#mainPause’);
if(mainPause_btn) mainPause_btn.addEventListener(‘click’, mainPause);
const mainStop_btn = $(’#mainStop’);
if(mainStop_btn) mainStop_btn.addEventListener(‘click’, mainStop);
const mainReset_btn = $(’#mainReset’);
if(mainReset_btn) mainReset_btn.addEventListener(‘click’, mainReset);
const mainSet_btn = $(’#mainSet’);
if(mainSet_btn) mainSet_btn.addEventListener(‘click’, setMainFromInput);
const mainClearLog_btn = $(’#mainClearLog’);
if(mainClearLog_btn) mainClearLog_btn.addEventListener(‘click’, ()=>mainLog && (mainLog.innerHTML=’’));
const mainExportCSV_btn = $(’#mainExportCSV’);
if(mainExportCSV_btn) mainExportCSV_btn.addEventListener(‘click’, ()=>exportListToCSV(mainLog,‘main_timer_log.csv’));
const mtExport_btn = $(’#mtExport’);
if(mtExport_btn) mtExport_btn.addEventListener(‘click’, ()=>exportListToCSV(mainLog,‘main_timer_log.csv’));

$$(’[data-preset]’).forEach(b=>b.addEventListener(‘click’, ()=>{
const s=parseInt(b.dataset.preset,10);
mainDur=s*1000;
mainRemain=mainDur;
drawMain();
log(mainLog,`Preset ${b.textContent}`);
}));

$$(’[data-adjust]’).forEach(b=>b.addEventListener(‘click’, ()=>{
const d=parseInt(b.dataset.adjust,10)*1000;
mainRemain=Math.max(0,mainRemain+d);
if(mainRemain>mainDur) mainDur=mainRemain;
drawMain();
log(mainLog,`Adjust ${b.textContent} → ${fmtMain()}`);
}));

const mainFullscreen_btn = $(’#mainFullscreen’);
if(mainFullscreen_btn) {
mainFullscreen_btn.addEventListener(‘click’, ()=>
openFS(‘main’, mainDigits?.textContent||‘00:00’, (mainDur?mainRemain/mainDur:0), !mainRunning && mainRemain>0 && mainRemain<mainDur, digitColor?.value, true)
);
}

/* ––––– Pro Timer (Simplified for now) ––––– */
let proTimers = [], activeProTimer = null, proCurrentTime = 0, proIsRunning = false, proMessages = [], proTick = null;
let proView = ‘admin’, showQR = false;

function loadProTimers() {
try {
const saved = localStorage.getItem(LS.proTimers);
proTimers = saved ? JSON.parse(saved) : [];
} catch(e) {
proTimers = [];
}
}

function saveProTimers() {
localStorage.setItem(LS.proTimers, JSON.stringify(proTimers));
}

function loadProMessages() {
try {
const saved = localStorage.getItem(LS.proMessages);
proMessages = saved ? JSON.parse(saved) : [];
} catch(e) {
proMessages = [];
}
}

function saveProMessages() {
localStorage.setItem(LS.proMessages, JSON.stringify(proMessages));
}

function initProTimer() {
loadProTimers();
loadProMessages();

// Check URL parameters for presenter mode
const urlParams = new URLSearchParams(window.location.search);
if(urlParams.get(‘view’) === ‘presenter’) {
const timerId = urlParams.get(‘timer’);
if(timerId && timerId !== ‘demo’) {
const timer = proTimers.find(t => t.id === timerId);
if(timer) {
activeProTimer = timer;
proCurrentTime = timer.duration;
loadProMessages();
}
}
proView = ‘presenter’;
}

renderProTimer();
}

function renderProTimer() {
const container = $(’#proTimer’);
if(!container) return;

container.innerHTML = `<div class="pro-admin" style="padding: 2rem; text-align: center;"> <h2 style="font-size: 2rem; margin-bottom: 2rem;">🎯 Pro Timer</h2> <p style="font-size: 1.25rem; color: #9ca3af; margin-bottom: 2rem;">Professional presentation timers with admin control</p> <div style="background: #374151; padding: 2rem; border-radius: 12px; margin: 2rem auto; max-width: 600px;"> <div style="margin-bottom: 1.5rem;"> <div style="font-size: 3rem; font-family: 'Courier New', monospace; color: #e53935; margin-bottom: 1rem;">05:00</div> <div style="width: 100%; height: 8px; background: #4b5563; border-radius: 4px; margin-bottom: 1rem;"> <div style="width: 100%; height: 100%; background: linear-gradient(to right, #10b981, #f59e0b, #ef4444); border-radius: 4px;"></div> </div> <p style="color: #d1d5db; margin-bottom: 1.5rem;">Demo Timer - Full features coming soon!</p> </div> <div style="display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;"> <button onclick="alert('Pro Timer features coming soon!')" style="padding: 0.75rem 1.5rem; background: #3b82f6; color: white; border: none; border-radius: 8px; cursor: pointer;">▶️ Start Demo</button> <button onclick="alert('Create timer feature coming soon!')" style="padding: 0.75rem 1.5rem; background: #10b981; color: white; border: none; border-radius: 8px; cursor: pointer;">+ Create Timer</button> <button onclick="alert('Share feature coming soon!')" style="padding: 0.75rem 1.5rem; background: #8b5cf6; color: white; border: none; border-radius: 8px; cursor: pointer;">🔗 Share</button> </div> </div> <div style="margin-top: 2rem; padding: 1.5rem; background: #1f2937; border-radius: 8px; border-left: 4px solid #60a5fa;"> <h3 style="color: #60a5fa; margin-bottom: 1rem;">Coming Soon Features:</h3> <ul style="text-align: left; color: #d1d5db; line-height: 1.6;"> <li>✨ Admin control panel</li> <li>📱 QR code sharing</li> <li>💬 Real-time messaging</li> <li>☁️ Cloud synchronization</li> <li>👥 Multi-device support</li> </ul> </div> </div>`;
}

/* ––––– FS update while open ––––– */
function updateFS(mode, ratio, paused, text, color, showBar){
if(fsMode!==mode) return;
if(!fsDigits) return;
fsDigits.textContent=text;
fsDigits.style.color=color||’’;
setFsFont(text);
if(fsBarWrap) fsBarWrap.style.display=showBar?‘block’:‘none’;
if(showBar && fsBar && fsElapsed){
const r=Math.max(0,Math.min(1,ratio||0));
fsBar.style.transform=`scaleX(${r})`;
fsElapsed.style.width=`${(1-r)*100}%`;
}
if(fsStatus) fsStatus.style.display=paused?‘block’:‘none’;
}

if(fsDigits) {
fsDigits.addEventListener(‘click’, ()=>{
if(fsMode===‘main’){ if(mainRunning) mainPause(); else mainStart(); }
});
}

/* ––––– Init ––––– */
function init(){
// Check for presenter mode on page load
const urlParams = new URLSearchParams(window.location.search);
if(urlParams.get(‘view’) === ‘presenter’) {
show(screens.indexOf(‘proTimer’));
} else {
show(0);
}

if(mainDigits) drawMain();
}

init();

// Enhanced resize handler
window.addEventListener(‘resize’, ()=>{
try{if(mainDigits) drawMain();}catch(e){}
});

})();
